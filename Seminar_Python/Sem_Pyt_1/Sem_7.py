# # Р—Р°РґР°С‡Р° 30: Р—Р°РїРѕР»РЅРёС‚Рµ РјР°СЃСЃРёРІ СЌР»РµРјРµРЅС‚Р°РјРё Р°СЂРёС„РјРµС‚РёС‡РµСЃРєРѕР№
# # РїСЂРѕРіСЂРµСЃСЃРёРё. Р•С‘ РїРµСЂРІС‹Р№ СЌР»РµРјРµРЅС‚, СЂР°Р·РЅРѕСЃС‚СЊ Рё РєРѕР»РёС‡РµСЃС‚РІРѕ
# # СЌР»РµРјРµРЅС‚РѕРІ РЅСѓР¶РЅРѕ РІРІРµСЃС‚Рё СЃ РєР»Р°РІРёР°С‚СѓСЂС‹. Р¤РѕСЂРјСѓР»Р° РґР»СЏ
# # РїРѕР»СѓС‡РµРЅРёСЏ n-РіРѕ С‡Р»РµРЅР° РїСЂРѕРіСЂРµСЃСЃРёРё: 
# # an = a1 + (n-1) * d.
# # РљР°Р¶РґРѕРµ С‡РёСЃР»Рѕ РІРІРѕРґРёС‚СЃСЏ СЃ РЅРѕРІРѕР№ СЃС‚СЂРѕРєРё.

# # Р’РІРѕРґ: 7 2 5
# # Р’С‹РІРѕРґ: 7 9 11 13 15

# a1 = 7
# d = 2
# n = 5
# res_list = []

# # a1 + (1 - 1) * d
# # a1 + (2 - 1) * d
# # a1 + (3 - 1) * d
# for i in range(1, n + 1):
#     res_list.append(a1 + (i - 1) * d)

# print(res_list)


# ---------------------------------------------------------------------------------------------------
# РЈ РІР°СЃ РµСЃС‚СЊ РєРѕРґ, РєРѕС‚РѕСЂС‹Р№ РІС‹ РЅРµ РјРѕР¶РµС‚Рµ РјРµРЅСЏС‚СЊ (С‚Р°Рє С‡Р°СЃС‚Рѕ Р±С‹РІР°РµС‚, РєРѕРіРґР° РєРѕРґ РІ РіР»СѓР±РёРЅРµ
# РїСЂРѕРіСЂР°РјРјС‹ РёСЃРїРѕР»СЊР·СѓРµС‚СЃСЏ РјРЅРѕР¶РµСЃС‚РІРѕ СЂР°Р· Рё РІС‹ РЅРµ С…РѕС‚РёС‚Рµ РЅРёС‡РµРіРѕ СЃР»РѕРјР°С‚СЊ):
# transformation = <???>
# values = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29] # РёР»Рё Р»СЋР±РѕР№ РґСЂСѓРіРѕР№ СЃРїРёСЃРѕРє
# transormed_values = list(map(transformation, values))
# Р•РґРёРЅСЃС‚РІРµРЅРЅС‹Р№ СЃРїРѕСЃРѕР± РІР°С€РµРіРѕ РІР·Р°РёРјРѕРґРµР№СЃС‚РІРёСЏ СЃ СЌС‚РёРј РєРѕРґРѕРј - РїРѕСЃСЂРµРґСЃС‚РІРѕРј Р·Р°РґР°РЅРёСЏ
# С„СѓРЅРєС†РёРё transformation.
# РћРґРЅР°РєРѕ РІС‹ РїРѕРЅСЏР»Рё, С‡С‚Рѕ РґР»СЏ РІР°С€РµР№ С‚РµРєСѓС‰РµР№ Р·Р°РґР°С‡Рё РІР°Рј РЅРµ РЅСѓР¶РЅРѕ РЅРёРєР°Рє РїСЂРµРѕР±СЂР°Р·РѕРІС‹РІР°С‚СЊ
# СЃРїРёСЃРѕРє Р·РЅР°С‡РµРЅРёР№, Р° РЅСѓР¶РЅРѕ РїРѕР»СѓС‡РёС‚СЊ РµРіРѕ РєР°Рє РµСЃС‚СЊ.
# РќР°РїРёС€РёС‚Рµ С‚Р°РєРѕРµ Р»СЏРјР±РґР°-РІС‹СЂР°Р¶РµРЅРёРµ transformation, С‡С‚РѕР±С‹ transformed_values РїРѕР»СѓС‡РёР»СЃСЏ
# РєРѕРїРёРµР№ values.

# Р’РІРѕРґ:
# values = [1, 23, 42, вЂasdfgвЂ™]
# transformed_values = list(map(trasformation, values))
# if values == transformed_values:
#  print(вЂokвЂ™)
# else:
#  print(вЂfailвЂ™)
# Р’С‹РІРѕРґ:
# ok

# def transformation(x):
#     return x

# transformation = lambda x: x
# values = [1, 23, 42, 'asdfg']
# transformed_values = list(map(transformation, values))
# if values == transformed_values:
#     print('ok')
# else:
#     print('fail')

# -----------------------------------------
# transformation = lambda x: x * 2
# values = [1, 23, 42]
# transformed_values = set(map(transformation, values))
# print(transformed_values)

# list1 = list(map(int, input('Р’РІРµРґРёС‚Рµ СЃРїРёСЃРѕРє: ').split(' ')))
# print(list1)

# ---------------------------------------------------------------------------------------------
# РџР»Р°РЅРµС‚С‹ РІСЂР°С‰Р°СЋС‚СЃСЏ РІРѕРєСЂСѓРі Р·РІРµР·Рґ РїРѕ СЌР»Р»РёРїС‚РёС‡РµСЃРєРёРј РѕСЂР±РёС‚Р°Рј.
# РќР°Р·РѕРІРµРј СЃР°РјРѕР№ РґР°Р»РµРєРѕР№ РїР»Р°РЅРµС‚РѕР№ С‚Сѓ, РѕСЂР±РёС‚Р° РєРѕС‚РѕСЂРѕР№ РёРјРµРµС‚
# СЃР°РјСѓСЋ Р±РѕР»СЊС€СѓСЋ РїР»РѕС‰Р°РґСЊ. РќР°РїРёС€РёС‚Рµ С„СѓРЅРєС†РёСЋ
# find_farthest_orbit(list_of_orbits), РєРѕС‚РѕСЂР°СЏ СЃСЂРµРґРё СЃРїРёСЃРєР° РѕСЂР±РёС‚
# РїР»Р°РЅРµС‚ РЅР°Р№РґРµС‚ С‚Сѓ, РїРѕ РєРѕС‚РѕСЂРѕР№ РІСЂР°С‰Р°РµС‚СЃСЏ СЃР°РјР°СЏ РґР°Р»РµРєР°СЏ
# РїР»Р°РЅРµС‚Р°. РљСЂСѓРіРѕРІС‹Рµ РѕСЂР±РёС‚С‹ РЅРµ СѓС‡РёС‚С‹РІР°Р№С‚Рµ: РІС‹ Р·РЅР°РµС‚Рµ, С‡С‚Рѕ Сѓ
# РІР°С€РµР№ Р·РІРµР·РґС‹ С‚Р°РєРёС… РїР»Р°РЅРµС‚ РЅРµС‚, Р·Р°С‚Рѕ РёСЃРєСѓСЃСЃС‚РІРµРЅРЅС‹Рµ СЃРїСѓС‚РЅРёРєРё
# Р±С‹Р»Рё Р±С‹Р»Рё Р·Р°РїСѓС‰РµРЅС‹ РЅР° РєСЂСѓРіРѕРІС‹Рµ РѕСЂР±РёС‚С‹. Р РµР·СѓР»СЊС‚Р°С‚РѕРј
# С„СѓРЅРєС†РёРё РґРѕР»Р¶РµРЅ Р±С‹С‚СЊ РєРѕСЂС‚РµР¶, СЃРѕРґРµСЂР¶Р°С‰РёР№ РґР»РёРЅС‹ РїРѕР»СѓРѕСЃРµР№
# СЌР»Р»РёРїСЃР° РѕСЂР±РёС‚С‹ СЃР°РјРѕР№ РґР°Р»РµРєРѕР№ РїР»Р°РЅРµС‚С‹. РљР°Р¶РґР°СЏ РѕСЂР±РёС‚Р°
# РїСЂРµРґСЃС‚Р°РІР»СЏРµС‚ РёР· СЃРµР±СЏ РєРѕСЂС‚РµР¶ РёР· РїР°СЂС‹ С‡РёСЃРµР» - РїРѕР»СѓРѕСЃРµР№ РµРµ
# СЌР»Р»РёРїСЃР°. РџР»РѕС‰Р°РґСЊ СЌР»Р»РёРїСЃР° РІС‹С‡РёСЃР»СЏРµС‚СЃСЏ РїРѕ С„РѕСЂРјСѓР»Рµ S = pi*a*b,
# РіРґРµ a Рё b - РґР»РёРЅС‹ РїРѕР»СѓРѕСЃРµР№ СЌР»Р»РёРїСЃР°. РџСЂРё СЂРµС€РµРЅРёРё Р·Р°РґР°С‡Рё
# РёСЃРїРѕР»СЊР·СѓР№С‚Рµ СЃРїРёСЃРѕС‡РЅС‹Рµ РІС‹СЂР°Р¶РµРЅРёСЏ. РџРѕРґСЃРєР°Р·РєР°: РїСЂРѕС‰Рµ РІСЃРµРіРѕ
# Р±СѓРґРµС‚ РЅР°Р№С‚Рё СЌР»Р»РёРїСЃ РІ РґРІР° С€Р°РіР°: СЃРЅР°С‡Р°Р»Р° РІС‹С‡РёСЃР»РёС‚СЊ СЃР°РјСѓСЋ
# Р±РѕР»СЊС€СѓСЋ РїР»РѕС‰Р°РґСЊ СЌР»Р»РёРїСЃР°, Р° Р·Р°С‚РµРј РЅР°Р№С‚Рё Рё СЃР°Рј СЌР»Р»РёРїСЃ,
# РёРјРµСЋС‰РёР№ С‚Р°РєСѓСЋ РїР»РѕС‰Р°РґСЊ. Р“Р°СЂР°РЅС‚РёСЂСѓРµС‚СЃСЏ, С‡С‚Рѕ СЃР°РјР°СЏ РґР°Р»РµРєР°СЏ
# РїР»Р°РЅРµС‚Р° СЂРѕРІРЅРѕ РѕРґРЅР°

# Р’РІРѕРґ:
# orbits = [(1, 3), (2.5, 10), (7, 2), (6, 6), (4, 3)]
# print(*find_farthest_orbit(orbits))
# Р’С‹РІРѕРґ:
# 2.5 10

from math import pi

# def find_farthest_orbit(list_of_orbits):
#     # СѓР±СЂР°С‚СЊ РєСЂСѓРіРѕРІС‹Рµ РѕСЂР±РёС‚С‹
#     # РЅР°Р№С‚Рё РїР»РѕС‰Р°РґСЊ РїРѕ С„РѕСЂРјСѓР»Рµ
#     # РґР»СЏ РЅР°РёР±РѕР»СЊС€РµР№ РїР»РѕС‰Р°РґРё РЅР°С…РѕРґРёРј РїРѕР»СѓРѕСЃРё(РёРЅРґРµРєСЃС‹)
#     print(list_of_orbits)
#     list_orb = [el for el in list_of_orbits if el[0] != el[1]] # СѓР±СЂР°С‚СЊ РєСЂСѓРіРѕРІС‹Рµ РѕСЂР±РёС‚С‹ 
#     print(list_orb)
#     list_s = [el[0] * el[1] * pi for el in list_orb] # РЅР°Р№С‚Рё РїР»РѕС‰Р°РґСЊ РїРѕ С„РѕСЂРјСѓР»Рµ
#     print(list_s)
#     index_max = list_s.index(max(list_s)) # РґР»СЏ РЅР°РёР±РѕР»СЊС€РµР№ РїР»РѕС‰Р°РґРё РЅР°С…РѕРґРёРј РёРЅРґРµРєСЃС‹
#     print(index_max)
#     return list_orb[index_max]


# orbits = [(1, 3), (2.5, 10), (7, 2), (6, 6), (4, 3)]
# # orbits = [(1, 3), (2.5, 10), (7, 2), (6, 6), (4, 3), (10, 20)]

# print(*find_farthest_orbit(orbits))


# # list1 = [78, 89, 45]
# # print(list1.index(89)) # 1


# ----------------------------------------------------------------------------------------------------
# РќР°РїРёС€РёС‚Рµ С„СѓРЅРєС†РёСЋ same_by(characteristic, objects), РєРѕС‚РѕСЂР°СЏ
# РїСЂРѕРІРµСЂСЏРµС‚, РІСЃРµ Р»Рё РѕР±СЉРµРєС‚С‹ РёРјРµСЋС‚ РѕРґРёРЅР°РєРѕРІРѕРµ Р·РЅР°С‡РµРЅРёРµ
# РЅРµРєРѕС‚РѕСЂРѕР№ С…Р°СЂР°РєС‚РµСЂРёСЃС‚РёРєРё, Рё РІРѕР·РІСЂР°С‰Р°СЋС‚ True, РµСЃР»Рё СЌС‚Рѕ С‚Р°Рє.
# Р•СЃР»Рё Р·РЅР°С‡РµРЅРёРµ С…Р°СЂР°РєС‚РµСЂРёСЃС‚РёРєРё РґР»СЏ СЂР°Р·РЅС‹С… РѕР±СЉРµРєС‚РѕРІ
# РѕС‚Р»РёС‡Р°РµС‚СЃСЏ - С‚Рѕ False. Р”Р»СЏ РїСѓСЃС‚РѕРіРѕ РЅР°Р±РѕСЂР° РѕР±СЉРµРєС‚РѕРІ, С„СѓРЅРєС†РёСЏ
# РґРѕР»Р¶РЅР° РІРѕР·РІСЂР°С‰Р°С‚СЊ True. РђСЂРіСѓРјРµРЅС‚ characteristic - СЌС‚Рѕ
# С„СѓРЅРєС†РёСЏ, РєРѕС‚РѕСЂР°СЏ РїСЂРёРЅРёРјР°РµС‚ РѕР±СЉРµРєС‚ Рё РІС‹С‡РёСЃР»СЏРµС‚ РµРіРѕ
# С…Р°СЂР°РєС‚РµСЂРёСЃС‚РёРєСѓ.
# Р’РІРѕРґ:                       Р’С‹РІРѕРґ:
#                             same

# values = [0, 3, 10, 6]      different


def same_by(characteristic, objects):
    return len(list(filter(characteristic, objects))) == 0


values = [4, 17, 20] 
if same_by(lambda x: x % 4, values):
    print('same')
else:
    print('different')

